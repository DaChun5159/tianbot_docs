import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.cc2b3d55.js";
const __pageData = JSON.parse('{"title":"常用git场景","description":"","frontmatter":{},"headers":[],"relativePath":"basic_guide/git.md","filePath":"basic_guide/git.md"}');
const _sfc_main = { name: "basic_guide/git.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><p style="${ssrRenderStyle({ "font-size": "30px", "font-weight": "bolder", "text-align": "center" })}"> git 快速使用 </p><h2 id="什么是git" tabindex="-1">什么是Git <a class="header-anchor" href="#什么是git" aria-label="Permalink to &quot;什么是Git&quot;">​</a></h2><p>很多人都知道，Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。</p><p>Linus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？</p><p>事实是，在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过手工方式合并代码！</p><p>你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是付费的，和Linux的开源精神不符。</p><p>不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。</p><p>安定团结的大好局面在2005年就被打破了，原因是Linux社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发Samba的Andrew试图破解BitKeeper的协议（这么干的其实也不只他一个），被BitMover公司发现了（监控工作做得不错！），于是BitMover公司怒了，要收回Linux社区的免费使用权。</p><p>Linus可以向BitMover公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的：</p><p>Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下。</p><p>Git迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。</p><p>历史就是这么偶然，如果不是当年BitMover公司威胁Linux社区，可能现在我们就没有免费而超级好用的Git了。</p><h2 id="安装和配置git" tabindex="-1">安装和配置git <a class="header-anchor" href="#安装和配置git" aria-label="Permalink to &quot;安装和配置git&quot;">​</a></h2><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#FFCB6B" })}">sudo</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">apt-get</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">install</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">git</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#FFCB6B" })}">git</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">config</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">--global</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">user.name</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">Your Name</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#FFCB6B" })}">git</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">config</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">--global</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">user.email</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">email@example.com</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="常用git命令" tabindex="-1">常用git命令 <a class="header-anchor" href="#常用git命令" aria-label="Permalink to &quot;常用git命令&quot;">​</a></h2><h3 id="git-clone" tabindex="-1">git clone <a class="header-anchor" href="#git-clone" aria-label="Permalink to &quot;git clone&quot;">​</a></h3><p>如何git clone带有子模块的Github仓库？</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#FFCB6B" })}">git</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">clone</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">--recurse-submodules</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">https://github.com/yourname/yourproject.git</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如何git clone仓库的特定分支？</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#FFCB6B" })}">git</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">clone</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">-b</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">master</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">https://github.com/yourname/yourproject.git</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="git-remote" tabindex="-1">git remote <a class="header-anchor" href="#git-remote" aria-label="Permalink to &quot;git remote&quot;">​</a></h3><p>如何修改remote的地址？</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#FFCB6B" })}">git</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">remote</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">set-url</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">origin</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">git@github.com:yourname/yourproject.git</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如何添加remote的地址？</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#FFCB6B" })}">git</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">submodule</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">add</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">-b</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">master</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">https://github.com/othername/otherproject.git</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="git-branch" tabindex="-1">git branch <a class="header-anchor" href="#git-branch" aria-label="Permalink to &quot;git branch&quot;">​</a></h3><p>如何查看当前所处git分支？</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#FFCB6B" })}">git</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">brnach</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">-a</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如何从当前所处git分支切换到新分支？</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#FFCB6B" })}">git</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">checkout</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">-b</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">newbranch</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h1 id="常用git场景" tabindex="-1">常用git场景 <a class="header-anchor" href="#常用git场景" aria-label="Permalink to &quot;常用git场景&quot;">​</a></h1><h3 id="场景一" tabindex="-1">场景一 <a class="header-anchor" href="#场景一" aria-label="Permalink to &quot;场景一&quot;">​</a></h3><p>假如你现在有一个本地项目，需要使用<code>git</code>进行版本管理，此时你想把项目上传到<code>github</code>，那么你就可以使用采用以下几步</p><h4 id="_1-在-github-上创建一个新的仓库" tabindex="-1">1. 在 GitHub 上创建一个新的仓库 <a class="header-anchor" href="#_1-在-github-上创建一个新的仓库" aria-label="Permalink to &quot;1. 在 GitHub 上创建一个新的仓库&quot;">​</a></h4><ul><li><p>打开 GitHub 的网站（<a href="https://github.com" target="_blank" rel="noreferrer">https://github.com</a>）并登录到您的帐户。</p></li><li><p>在页面右上角的下拉菜单中，选择“New repository”。</p></li><li><p>输入仓库的名称和描述，并选择其他选项，如公开/私有、README 文件等。</p></li><li><p>点击“Create repository”来创建新的仓库。</p></li></ul><h4 id="_2-在本地设置-git" tabindex="-1">2. 在本地设置 Git <a class="header-anchor" href="#_2-在本地设置-git" aria-label="Permalink to &quot;2. 在本地设置 Git&quot;">​</a></h4><ul><li><p>打开终端或命令行界面。</p></li><li><p>进入您的项目文件夹，使用cd命令切换到项目目录。、</p></li><li><p>运行以下命令来初始化本地 Git 仓库</p></li></ul><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#FFCB6B" })}">git</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">init</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_3-关联本地仓库与远程仓库" tabindex="-1">3. 关联本地仓库与远程仓库 <a class="header-anchor" href="#_3-关联本地仓库与远程仓库" aria-label="Permalink to &quot;3. 关联本地仓库与远程仓库&quot;">​</a></h4><ul><li>复制刚才在 GitHub 上创建的仓库的 URL。</li><li>运行以下命令来将本地仓库与远程仓库关联起来</li></ul><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#FFCB6B" })}">git</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">remote</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">add</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">origin</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">仓库</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">UR</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">L</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>例如</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#FFCB6B" })}">git</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">remote</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">add</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">origin</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">https://github.com/yourname/yourproject.git</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_4-添加文件到本地仓库" tabindex="-1">4. 添加文件到本地仓库 <a class="header-anchor" href="#_4-添加文件到本地仓库" aria-label="Permalink to &quot;4. 添加文件到本地仓库&quot;">​</a></h4><ul><li>使用git add命令将要提交的文件添加到暂存区。例如，若要添加所有文件，可以运行</li></ul><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#FFCB6B" })}">git</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">add</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">.</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">                 </span><span style="${ssrRenderStyle({ "color": "#676E95", "font-style": "italic" })}"># 不要漏了这个.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_5-提交文件到本地仓库" tabindex="-1">5. 提交文件到本地仓库 <a class="header-anchor" href="#_5-提交文件到本地仓库" aria-label="Permalink to &quot;5. 提交文件到本地仓库&quot;">​</a></h4><p>运行以下命令将暂存区的文件提交到本地仓库</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#FFCB6B" })}">git</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">commit</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">-m</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">提交信息</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}">   </span><span style="${ssrRenderStyle({ "color": "#676E95", "font-style": "italic" })}"># 提交信息可自定义</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_6-推送代码到远程仓库" tabindex="-1">6. 推送代码到远程仓库 <a class="header-anchor" href="#_6-推送代码到远程仓库" aria-label="Permalink to &quot;6. 推送代码到远程仓库&quot;">​</a></h4><p>运行以下命令将本地仓库的代码推送到 GitHub 远程仓库</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#FFCB6B" })}">git</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">push</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">origin</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">master</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>完成以上步骤后，您的本地项目就会被上传到 GitHub，并开始进行版本管理。您可以在 GitHub 仓库页面上看到您的上传的文件和提交历史。</p><div class="info custom-block"><p class="custom-block-title">提示</p><p>如果您之前已经将文件添加到.gitignore中排除版本控制，则需要先从.gitignore中移除这些文件，才能将它们添加到本地仓库中。</p></div><h3 id="场景二" tabindex="-1">场景二 <a class="header-anchor" href="#场景二" aria-label="Permalink to &quot;场景二&quot;">​</a></h3><p>当您发现一个开源项目的代码存在 bug 并且已经找到了解决方法，想要为该项目提交您修改过的代码，您可以按照以下步骤进行操作</p><h4 id="_1-克隆项目" tabindex="-1">1.克隆项目 <a class="header-anchor" href="#_1-克隆项目" aria-label="Permalink to &quot;1.克隆项目&quot;">​</a></h4><p>打开终端或命令行界面。 使用 git clone &lt;项目 URL&gt; 命令来克隆项目到本地。</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#FFCB6B" })}">git</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">clone</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">https://github.com/yourname/yourproject.git</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这将在当前目录下创建一个与项目同名的文件夹，并将项目代码下载到该文件夹中。</p><h4 id="_2-创建分支" tabindex="-1">2.创建分支 <a class="header-anchor" href="#_2-创建分支" aria-label="Permalink to &quot;2.创建分支&quot;">​</a></h4><p>运行以下命令创建一个新的分支，以便您可以在该分支上进行修复</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#FFCB6B" })}">git</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">checkout</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">-b</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">bug-fix</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>将 bug-fix 替换为一个描述性的分支名称。</p><div class="tip custom-block"><p class="custom-block-title">提示</p><p><a href="https://mp.weixin.qq.com/s/LWQolvFQQndBhFQ2lP2vhQ" target="_blank" rel="noreferrer">大厂的Git代码管理规范是怎样的？</a></p></div><h4 id="_3-应用修复" tabindex="-1">3.应用修复 <a class="header-anchor" href="#_3-应用修复" aria-label="Permalink to &quot;3.应用修复&quot;">​</a></h4><p>找到包含 bug 的代码文件，并进行相应的修改。使用您的解决方案来修复该问题。</p><h4 id="_4-提交修改" tabindex="-1">4.提交修改 <a class="header-anchor" href="#_4-提交修改" aria-label="Permalink to &quot;4.提交修改&quot;">​</a></h4><p>运行以下命令将修改后的文件添加到暂存区：git add &lt;修改的文件&gt; 替换 &lt;修改的文件&gt; 为您修复的实际文件名。如果有多个文件需要添加，可以重复运行该命令或使用通配符 * 来添加所有文件。</p><h4 id="_5-提交说明" tabindex="-1">5.提交说明 <a class="header-anchor" href="#_5-提交说明" aria-label="Permalink to &quot;5.提交说明&quot;">​</a></h4><p>运行以下命令来提交修改，并提供有意义的提交说明信息：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#FFCB6B" })}">git</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">commit</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">-m</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">修复了一个 bug，原因是...</span><span style="${ssrRenderStyle({ "color": "#89DDFF" })}">&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_6-推送分支" tabindex="-1">6.推送分支 <a class="header-anchor" href="#_6-推送分支" aria-label="Permalink to &quot;6.推送分支&quot;">​</a></h4><p>运行以下命令将您的修复分支推送到远程仓库：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#FFCB6B" })}">git</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">push</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">origin</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">bug-fix</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>替换 bug-fix 为您创建的实际分支名称。</p><h4 id="_7-创建-pull-request" tabindex="-1">7.创建 Pull Request <a class="header-anchor" href="#_7-创建-pull-request" aria-label="Permalink to &quot;7.创建 Pull Request&quot;">​</a></h4><p>打开该项目的 GitHub 页面。 点击 &quot;Compare &amp; pull request&quot; 按钮来开始创建一个 Pull Request。 确保 base 分支是正确的，选择您的修复分支作为 compare 分支。 提供一个有意义的标题和详细的描述，解释您的修复方案。</p><h4 id="_8-等待审核并讨论" tabindex="-1">8.等待审核并讨论 <a class="header-anchor" href="#_8-等待审核并讨论" aria-label="Permalink to &quot;8.等待审核并讨论&quot;">​</a></h4><p>项目维护者会收到您的 Pull Request，并对您的代码进行审核和讨论。 根据反馈，您可能需要进一步修改代码或回答问题。</p><div class="info custom-block"><p class="custom-block-title">提示</p><p>提交代码是为开源社区做贡献的重要方式</p></div><p style="${ssrRenderStyle({ "font-size": "30px", "font-weight": "bolder" })}">References</p><ul><li><a href="https://www.liaoxuefeng.com/wiki/896043488029600/896202815778784" target="_blank" rel="noreferrer">廖雪峰：Git的诞生</a></li></ul></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("basic_guide/git.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const git = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  git as default
};
