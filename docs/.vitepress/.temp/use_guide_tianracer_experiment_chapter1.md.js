import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.cc2b3d55.js";
const __pageData = JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"use_guide/tianracer/experiment/chapter1.md","filePath":"use_guide/tianracer/experiment/chapter1.md"}');
const _sfc_main = { name: "use_guide/tianracer/experiment/chapter1.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><p style="${ssrRenderStyle({ "font-size": "30px", "font-weight": "bolder", "text-align": "center" })}">一、实验工具的使用</p><h3 id="【实验目标】" tabindex="-1">【实验目标】 <a class="header-anchor" href="#【实验目标】" aria-label="Permalink to &quot;【实验目标】&quot;">​</a></h3><ul><li>体验高效开发工具ROS2GO</li><li>了解常用代码管理工具github，将源码下载至本地</li><li>如何查看[看云]</li></ul><h3 id="【实验内容】" tabindex="-1">【实验内容】 <a class="header-anchor" href="#【实验内容】" aria-label="Permalink to &quot;【实验内容】&quot;">​</a></h3><h4 id="ros2go" tabindex="-1">ROS2GO <a class="header-anchor" href="#ros2go" aria-label="Permalink to &quot;ROS2GO&quot;">​</a></h4><p>从ROS2GO中启动ROS系统，简单来说只需要3步：</p><p>将ROS2GO插入USB3.0端口 启动进入BIOS在启动项中选择TIANBOT ROS2GO 正常启动，开始ROS2GO之旅</p><p>详情查看：ROS2GO如何启动</p><p><img src="https://tianbot-pic.oss-cn-beijing.aliyuncs.com/tianbot/202112211740536.webp" alt=""></p><h4 id="github" tabindex="-1">Github <a class="header-anchor" href="#github" aria-label="Permalink to &quot;Github&quot;">​</a></h4><p>GitHub是一个面向开源及私有软件项目的托管平台，因为只支持Git作为唯一的版本库格式进行托管，故名GitHub。 使用Github的目的之一是方便对代码进行管理</p><p>下载并编译Tianbot元功能包源码（相关功能包已预置于ROS2GO和NVIDIA Jetson Nano，如果没有可以尝试以下命令）</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#82AAFF" })}">cd</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">~/tianbot_ws/src/</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#FFCB6B" })}">git</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">clone</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">https://github.com/tianbot/tianracer.git</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#82AAFF" })}">cd</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">~/tianbot_ws</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#FFCB6B" })}">catkin_make</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#82AAFF" })}">source</span><span style="${ssrRenderStyle({ "color": "#A6ACCD" })}"> </span><span style="${ssrRenderStyle({ "color": "#C3E88D" })}">devel/setup.bash</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>ROS端的底层驱动预置于配套的运算平台，代码开源，包含环境感知，如定位、建图；运动规划，包括全局规划（路径规划），局部规划（轨迹规划），更新比较频繁，可以随时点击下面链接获取最新代码</p><p><a href="https://github.com/tianbot/tianracer" target="_blank" rel="noreferrer">https://github.com/tianbot/tianracer</a></p><p>::: attention]</p><blockquote><p>关于修改源码问题，在下面几个实验中，我们不推荐大家直接修改源码进行实验，如果实在要进行其他功能开发，建议新建功能包，或复制粘贴原文件，应尽量保证代码的最佳实践。</p></blockquote><h4 id="vs-code" tabindex="-1">VS Code <a class="header-anchor" href="#vs-code" aria-label="Permalink to &quot;VS Code&quot;">​</a></h4><p>VS Code是一款功能强大的代码编辑器，被称为“宇宙第一IDE”，这里ROS2GO也提前配置好了，点击桌面下方图标打开，左上角文件--&gt;打开文件夹--&gt;选择tianbot_ws下的tianbot功能包，即可查看源码以及进行编辑开发</p><p><img src="https://tianbot-pic.oss-cn-beijing.aliyuncs.com/tianbot/202112211740121.png" alt=""></p><h4 id="linux常用命令" tabindex="-1">Linux常用命令 <a class="header-anchor" href="#linux常用命令" aria-label="Permalink to &quot;Linux常用命令&quot;">​</a></h4><table><thead><tr><th style="${ssrRenderStyle({ "text-align": "center" })}">命令</th><th style="${ssrRenderStyle({ "text-align": "center" })}">功能</th></tr></thead><tbody><tr><td style="${ssrRenderStyle({ "text-align": "center" })}">cd tianbot_ws</td><td style="${ssrRenderStyle({ "text-align": "center" })}">进入tianbot_ws文件夹</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "center" })}">cd ..</td><td style="${ssrRenderStyle({ "text-align": "center" })}">返回上一级目录</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "center" })}">ls</td><td style="${ssrRenderStyle({ "text-align": "center" })}">查看当前文件与目录</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "center" })}">tab</td><td style="${ssrRenderStyle({ "text-align": "center" })}">补全命令</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "center" })}">ctrl+c</td><td style="${ssrRenderStyle({ "text-align": "center" })}">中断程序执行</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "center" })}">ctrl+shift+c</td><td style="${ssrRenderStyle({ "text-align": "center" })}">终端窗口下的复制</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "center" })}">ctrl+shift+v</td><td style="${ssrRenderStyle({ "text-align": "center" })}">终端窗口下的粘贴</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "center" })}">ctrl+shift+w</td><td style="${ssrRenderStyle({ "text-align": "center" })}">关掉窗口</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "center" })}">cp file1 file2 file3 dir</td><td style="${ssrRenderStyle({ "text-align": "center" })}">把文件file1、file2、file3复制到目录dir中</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "center" })}">rm -i file</td><td style="${ssrRenderStyle({ "text-align": "center" })}">删除文件file，在删除之前会询问是否进行该操作</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "center" })}">rm -fr dir</td><td style="${ssrRenderStyle({ "text-align": "center" })}">强制删除目录dir中的所有文件</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "center" })}">sudo</td><td style="${ssrRenderStyle({ "text-align": "center" })}">切换到超级用户模式以执行超级用户权限，提示输入密码</td></tr></tbody></table><h4 id="ros常用命令" tabindex="-1">ROS常用命令 <a class="header-anchor" href="#ros常用命令" aria-label="Permalink to &quot;ROS常用命令&quot;">​</a></h4><table><thead><tr><th style="${ssrRenderStyle({ "text-align": "center" })}">命令</th><th style="${ssrRenderStyle({ "text-align": "center" })}">功能</th></tr></thead><tbody><tr><td style="${ssrRenderStyle({ "text-align": "center" })}">mkdir</td><td style="${ssrRenderStyle({ "text-align": "center" })}">新建文件夹</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "center" })}">touch</td><td style="${ssrRenderStyle({ "text-align": "center" })}">新建文件</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "center" })}">catkin_create_pkg</td><td style="${ssrRenderStyle({ "text-align": "center" })}">创建功能包</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "center" })}">catkin_make</td><td style="${ssrRenderStyle({ "text-align": "center" })}">编译工作空间</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "center" })}">roscd</td><td style="${ssrRenderStyle({ "text-align": "center" })}">跳转至某个pkg目录下</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "center" })}">rostopic list</td><td style="${ssrRenderStyle({ "text-align": "center" })}">查看当前启动话题列表</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "center" })}">rosnode list</td><td style="${ssrRenderStyle({ "text-align": "center" })}">查看当前启动节点列表</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "center" })}">ctrl+shift+w</td><td style="${ssrRenderStyle({ "text-align": "center" })}">关掉窗口</td></tr></tbody></table><h4 id="ros-wiki" tabindex="-1">ROS_WIKI <a class="header-anchor" href="#ros-wiki" aria-label="Permalink to &quot;ROS_WIKI&quot;">​</a></h4><p>更多更详细的ROS教程可以在ROS官网学习：<a href="http://wiki.ros.org" target="_blank" rel="noreferrer">http://wiki.ros.org</a></p></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("use_guide/tianracer/experiment/chapter1.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const chapter1 = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  chapter1 as default
};
